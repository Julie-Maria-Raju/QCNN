#DATASETS:
#- mnist
#    - Preencoded
#    mnist_dataset_preencoded(params=settings.PARAMS, mnist_path="/home/maureen/PycharmProjects/qc-diag/mnist", path="/home/maureen/PycharmProjects/qc-diag/mnist")
#    - Not Preencoded
#    mnist_dataset(path="/home/maureen/PycharmProjects/qc-diag/mnist")
#- medical
#    medical_dataset(csv_file="malignancy.csv", root_dir="/data/datasets/medical_datasets/LIDC-IDRI/preprocessed", transform=min_max_lung, do_3D_conv=PARAMS["do_3D_conv"])
#MODELS:
#- Hybrid for MNIST
#    - HybridModel_MNIST_one_conv
#    - HybridModel_MNIST_two_conv
#- Hybrid for LIDC-IDRI
#    - for 3D convolutions: HybridModel_medical_3D_conv_middle(PARAMS, quantum=True)
#    - for 2D convolutions: HybridModel_medical_2D(PARAMS, quantum=True)

# define which GPU to use
CUDA_VISIBLE_DEVICES: "5"

### Define the model settings ###

"PARAMS":
    epochs_num: 20
    do_3D_conv: True
    lr: 0.001
    batch_size: 64

    # CNN seeds (used for both classical and quantum setup)
    # used seeds from 6-10 for paper results
    #weights_seed: 6
    #torch_seed: 6
    #np_seed: 6
    #random_seed: 6
    all_seeds: 6

    # QCNN-related settings

    # Circuit setup
    circuit_layers: 1
    n_rotations: 8
    filter_length: 2
    stride: 2
    device: lightning.qubit
    diff_method: adjoint

    # Encoding
    encoder: Angle_Encoder
    encoder_args: {}

    preencoded: False

    # Calculations and measurements
    calculation: StronglyEntanglingLayer # other choices e.g. Sequence_CNOTs

    # Calculation for custom circuit. If `wires_to_act_on` is empty, gates are applied to all available qubits
    # Calculation args for random circuit use a seed for circuit construction
    # calculation_args:
    #   wires_to_act_on: []
    calculation_args:
        wires_to_act_on: []
        seed: 10
    measurement: UniformGateMeasurements
    measurement_args: {}
    trainable: True

    # Evaluations
    calculate_expressibility: False


save_weights: True

# Choose a dataset by its identifier. Available options are {mnist, med_mnist, breast_mnist, medical}.
# Docker: you can pass the DATASET directory with the .env file
DATASET: medical

QUANTUM: True

#Choose a ML model by its identifier. Available options are {mnist_one_conv, mnist_two_conv,  mnist_two_conv_middle, mnist_one_conv_multiOut, mnist_one_conv_multiOut_multipass, medical_2D, medical_3D_conv_middle}.
# mnist_one_conv <=> HybridModel_MNIST_one_conv
# mnist_two_conv <=> HybridModel_MNIST_two_conv
# mnist_two_conv_middle <=> HybridModel_MNIST_two_conv_middle
# mnist_one_conv_multiOut <=> HybridModel_MNIST_one_conv_multiOut
# mnist_one_conv_multiOut_multipass <=>  HybridModel_MNIST_one_conv_multiOut_multipass
# medical_2D <=> HybridModel_medical_2D
# medical_3D <=> HybridModel_medical_3D
# medical_3D_conv_middle <=> HybridModel_medical_3D_conv_middle
MODEL: medical_3D_conv_middle

# Directory to save the experiments
SAVE_DIR: /data/andrea
# SAVE_DIR = os.path.join(os.environ['DATA'], 'results')
# Docker: same here

# Folder name to save the experiments
SAVE_NAME: medical_3D
# Experiment name is changed automatically
EXP_NAME:
